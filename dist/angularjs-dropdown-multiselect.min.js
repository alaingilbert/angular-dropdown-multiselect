"use strict";var directiveModule=angular.module("angularjs-dropdown-multiselect",[]);directiveModule.directive("ngDropdownMultiselect",["$filter","$document","$compile","$parse",function($filter,$document,$compile,$parse){return{restrict:"AE",scope:{selectedModel:"=",options:"=",extraSettings:"=",events:"=",searchFilter:"=?",translationTexts:"=",groupBy:"@"},templateUrl:"src/partials/dropdown-multiselect.html",link:function($scope,$element,$attrs){var isModelEmpty=function(){return 0===numberOfSelectedItem()},getItemDisplayText=function(item){var displayText=optionItem[$scope.settings.displayProp],converterResponse=$scope.settings.smartButtonTextConverter(displayText,optionItem);return converterResponse||displayText},numberOfSelectedItem=function(){var totalSelected;return totalSelected=$scope.singleSelection?null!==$scope.selectedModel&&angular.isDefined($scope.selectedModel[$scope.settings.idProp])?1:0:angular.isDefined($scope.selectedModel)?$scope.selectedModel.length:0},getSmartButtonTitle=function(){var itemsText=[];return angular.forEach($scope.options,function(optionItem){$scope.isChecked(optionItem[$scope.settings.idProp])&&itemsText.push(getItemDisplayText(optionItem))}),numberOfSelectedItem()>$scope.settings.smartButtonMaxItems&&(itemsText=itemsText.slice(0,$scope.settings.smartButtonMaxItems),itemsText.push("...")),itemsText.join(", ")},getDefaultButtonTitle=function(){var totalSelected=numberOfSelectedItem(),titlePieces=[totalSelected,$scope.texts.dynamicButtonTextSuffix];return 0===totalSelected&&(titlePieces=[$scope.texts.buttonDefaultText]),titlePieces.join(" ")},getFindObj=function(id){var findObj={};return findObj[$scope.settings.idProp]=id,findObj},getFinalObj=function(id){var findObj=getFindObj(id),finalObj=_.find($scope.options,findObj);return finalObj},objExists=function(id){var findObj=getFindObj(id);return-1!==_.findIndex($scope.selectedModel,findObj)},isSelectionLimitExceeded=function(){return $scope.settings.selectionLimit>0&&numberOfSelectedItem()>$scope.settings.selectionLimit},closeOnBlur=function(e){for(var target=e.target.parentElement,parentFound=!1;angular.isDefined(target)&&null!==target&&!parentFound;)_.contains(target.className.split(" "),"multiselect-parent")&&!parentFound&&target===$scope.$dropdownTrigger&&(parentFound=!0),target=target.parentElement;parentFound||$scope.$apply(function(){$scope.open=!1})};$scope.toggleDropdown=function(){$scope.open=!$scope.open},$scope.checkboxClick=function($event,id){$scope.toggleItem(id),$event.stopImmediatePropagation()},$scope.getGroupTitle=function(groupValue){return null!==$scope.settings.groupByTextProvider?$scope.settings.groupByTextProvider(groupValue):groupValue},$scope.getButtonText=function(){var title="";return title=$scope.settings.dynamicTitle&&!isModelEmpty()?$scope.settings.smartButtonMaxItems>0?getSmartButtonTitle():getDefaultButtonTitle():$scope.texts.buttonDefaultText},$scope.selectAll=function(){$scope.deselectAll({sendEvent:!1}),angular.forEach($scope.options,function(value){$scope.selectItem(value[$scope.settings.idProp],{sendEvent:!1})}),$scope.externalEvents.onSelectAll()},$scope.deselectAll=function(params){params=params||{},angular.isUndefined(params.sendEvent)&&(params.sendEvent=!0),$scope.singleSelection?scope.selectedModel={}:$scope.selectedModel.splice(0,numberOfSelectedItem()),params.sendEvent&&$scope.externalEvents.onDeselectAll()},$scope.selectItem=function(id,params){var params=params||{};angular.isUndefined(params.sendEvent)&&(params.sendEvent=!0);var finalObj=getFinalObj(id),sendEvent=function(item){params.sendEvent&&$scope.externalEvents.onItemSelect(item)};$scope.singleSelection?($scope.selectedModel=finalObj,sendEvent(finalObj)):objExists(id)||isSelectionLimitExceeded()||($scope.selectedModel.push(finalObj),sendEvent(finalObj))},$scope.deselectItem=function(id){var finalObj=getFinalObj(id);$scope.selectedModel.splice(_.findIndex($scope.selectedModel,finalObj),1),$scope.externalEvents.onItemDeselect(finalObj)},$scope.toggleItem=function(id){objExists(id)?$scope.deselectItem(id):$scope.selectItem(id)},$scope.isChecked=function(id){return $scope.singleSelection?null!==$scope.selectedModel&&angular.isDefined($scope.selectedModel[$scope.settings.idProp])&&$scope.selectedModel[$scope.settings.idProp]===id:objExists(id)},function(){$scope.$dropdownTrigger=$element.children()[0],$scope.externalEvents={onItemSelect:angular.noop,onItemDeselect:angular.noop,onSelectAll:angular.noop,onDeselectAll:angular.noop,onInitDone:angular.noop,onMaxSelectionReached:angular.noop},$scope.settings={dynamicTitle:!0,scrollable:!1,scrollableHeight:"300px",closeOnBlur:!0,displayProp:"label",idProp:"id",enableSearch:!1,selectionLimit:0,showCheckAll:!0,showUncheckAll:!0,closeOnSelect:!1,buttonClasses:"btn btn-default",closeOnDeselect:!1,checkboxes:$attrs.checkboxes||void 0,groupBy:$attrs.groupBy||void 0,groupByTextProvider:null,smartButtonMaxItems:0,smartButtonTextConverter:angular.noop},$scope.texts={checkAll:"Check All",uncheckAll:"Uncheck All",selectionCount:"checked",selectionOf:"/",searchPlaceholder:"Search...",buttonDefaultText:"Select",dynamicButtonTextSuffix:"checked"},$scope.searchFilter=$scope.searchFilter||"",angular.isDefined($scope.settings.groupBy)&&$scope.$watch("options",function(newValue){angular.isDefined(newValue)&&($scope.orderedItems=$filter("orderBy")(newValue,$scope.settings.groupBy))}),angular.extend($scope.settings,$scope.extraSettings||[]),angular.extend($scope.externalEvents,$scope.events||[]),angular.extend($scope.texts,$scope.translationTexts),$scope.singleSelection=1===$scope.settings.selectionLimit,$scope.singleSelection&&angular.isArray($scope.selectedModel)&&0===$scope.selectedModel.length&&($scope.selectedModel={}),$scope.settings.closeOnBlur&&($document.on("click",closeOnBlur),$scope.$on("$destroy",function(){$document.off("click",closeOnBlur)})),$scope.externalEvents.onInitDone()}()}}}]),angular.module("angularjs-dropdown-multiselect").run(["$templateCache",function($templateCache){$templateCache.put("src/partials/dropdown-multiselect.html",'<div class="multiselect-parent btn-group dropdown-multiselect">\n\n  <button type="button" class="dropdown-toggle" ng-class="settings.buttonClasses" ng-click="toggleDropdown()">{{getButtonText()}}&nbsp;<span class="caret"></span></button>\n\n  <ul class="dropdown-menu dropdown-menu-form" ng-style="{display: open ? \'block\' : \'none\', height: settings.scrollable ? settings.scrollableHeight : \'auto\' }" style="overflow: scroll">\n    <li ng-show="settings.showCheckAll && settings.selectionLimit == 0">\n      <a data-ng-click="selectAll()"><span class="fa fa-check"></span> {{texts.checkAll}}</a>\n    </li>\n    <li ng-show="settings.showUncheckAll">\n      <a data-ng-click="deselectAll();"><span class="fa fa-times"></span> {{texts.uncheckAll}}</a>\n    </li>\n\n    <li ng-show="(settings.showCheckAll && settings.selectionLimit == 0) || settings.showUncheckAll" class="divider"></li>\n\n    <li ng-show="settings.enableSearch">\n      <div class="dropdown-header">\n        <input type="text" class="form-control" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" />\n      </div>\n    </li>\n\n    <li ng-show="settings.enableSearch" class="divider"></li>\n\n    <li ng-if="settings.groupBy" ng-repeat-start="option in orderedItems | filter: searchFilter" ng-show="option[settings.groupBy] !== orderedItems[$index - 1][settings.groupBy]" role="presentation" class="dropdown-header">\n      {{ getGroupTitle(option[settings.groupBy]) }}\n    </li>\n    <li ng-if="settings.groupBy" ng-repeat-end role="presentation">\n    <li ng-if="!settings.groupBy" role="presentation" ng-repeat="option in options | filter: searchFilter">\n\n    <li role="presentation" ng-repeat="option in options | filter: searchFilter">\n      <a role="menuitem" tabindex="-1" ng-click="toggleItem(option[settings.idProp])">\n\n        <div ng-if="settings.checkboxes" class="checkbox">\n          <label>\n            <input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, option[settings.idProp])" ng-checked="isChecked(option[settings.idProp])" />\n            {{option[settings.displayProp]}}\n          </label>\n        </div>\n\n        <div ng-if="!settings.checkboxes">\n          <span data-ng-class="{\'fa fa-check\': isChecked(option[settings.idProp])}"></span> {{option[settings.displayProp]}}\n        </div>\n      </a>\n    </li>\n\n    <li class="divider" ng-show="settings.selectionLimit > 1"></li>\n\n    <li role="presentation" ng-show="settings.selectionLimit > 1">\n      <a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a>\n    </li>\n  </ul>\n</div>\n')}]);